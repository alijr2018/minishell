readline, rl_clear_history, rl_on_new_line,
rl_replace_line, rl_redisplay, add_history,
printf, malloc, free, write, access, open, read,
close, fork, wait, waitpid, wait3, wait4, signal,
sigaction, sigemptyset, sigaddset, kill, exit,
getcwd, chdir, stat, lstat, fstat, unlink, execve,
dup, dup2, pipe, opendir, readdir, closedir,
strerror, perror, isatty, ttyname, ttyslot, ioctl,
getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
tgetnum, tgetstr, tgoto, tputs

/**
int in_fd = 0, out_fd = 0, ;
// Handle input redirection
        if (ft_strcmp(args[i], "<") == 0)
        {
            if (!args[i + 1])
                return;  // No file specified
            in_fd = open(args[i + 1], O_RDONLY);
            if (in_fd == -1)
            {
                perror("Input redirection error");
                return;
            }
            i += 2;  // Skip the redirection operator and file name
        }
        // Handle output redirection
        else if (ft_strcmp(args[i], ">") == 0)
        {
            if (!args[i + 1])
                return;  // No file specified
            out_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (out_fd == -1)
            {
                perror("Output redirection error");
                return;
            }
            i += 2;
        }
        // Handle append redirection
        else if (ft_strcmp(args[i], ">>") == 0)
        {
            if (!args[i + 1])
                return;  // No file specified
            out_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_APPEND, 0644);
            if (out_fd == -1)
            {
                perror("Append redirection error");
                return;
            }
            i += 2;
        }
        // Handle here-document (<<)
        else if (ft_strcmp(args[i], "<<") == 0)
        {
            if (!args[i + 1])
                return;  // No delimiter specified
            char *delimiter = args[i + 1];
            char *line = NULL;
            size_t len = 0;
            in_fd = fileno(tmpfile());  // Use a temporary file for input
            while (1)
            {
                printf("heredoc> ");
                getline(&line, &len, stdin);
                if (ft_strcmp(line, delimiter) == 0)
                    break;
                write(in_fd, line, strlen(line));
            }
            free(line);
            i += 2;
        }
        // Handle pipes (|) - Piping logic
		else  
        
            if (in_fd)
        dup2(in_fd, STDIN_FILENO);
    if (out_fd)
        dup2(out_fd, STDOUT_FILENO);*/
/**
int has_unclosed_quotes(const char *str)
{
    int single_quote = 0, double_quote = 0;

    while (*str)
    {
        if (*str == '\'' && double_quote == 0)
            single_quote = !single_quote;
        else if (*str == '"' && single_quote == 0)
            double_quote = !double_quote;
        str++;
    }
    return (single_quote || double_quote); // Return 1 if there's an unclosed quote
}

char *read_full_command(void)
{
    char *input = NULL;
    char *temp;
    char *line;

    input = readline("minishell! ");
    if (!input)
        return NULL;

    while (has_unclosed_quotes(input)) // Keep reading until quotes are closed
    {
        temp = readline("> "); // Prompt continuation
        if (!temp)
            break;
        line = malloc(strlen(input) + strlen(temp) + 2);
        if (!line)
            return input;
        sprintf(line, "%s\n%s", input, temp); // Append new line
        free(input);
        input = line;
        free(temp);
    }
    return input;
}

int main(void)
{
    char *input;
    char **search;

    while (1)
    {
        input = read_full_command();
        if (!input)
        {
            printf("exit\n");
            exit(0);
        }
        if (strcmp(input, "exit") == 0)
        {
            free(input);
            break;
        }
        if (*input)
            add_history(input);
        search = ft_split(input, ' '); // Assuming ft_split is implemented
        ft_run(search);
        free(input);
    }
    return (0);
}
    
void ft_echo(char **args)
{
    int i = 1; // Skip "echo"
    while (args[i])
    {
        printf("%s", args[i]);
        if (args[i + 1]) // Print space between words
            printf(" ");
        i++;
    }
    printf("\n");
}
char *read_full_command(void)
{
    char *input = NULL;
    char *line;
    char quote = 0; // Stores the quote type (' or ")

    input = readline("minishell! ");
    if (!input)
        return NULL;

    // Check if there's an unmatched quote
    for (int i = 0; input[i]; i++)
    {
        if (!quote && (input[i] == '\'' || input[i] == '"'))
            quote = input[i]; // Start quote
        else if (quote && input[i] == quote)
            quote = 0; // Close quote
    }

    // If an open quote exists, keep reading
    while (quote)
    {
        line = readline("> "); // Read next line
        if (!line) // Handle Ctrl+D
            break;

        char *temp = input;
        input = malloc(strlen(temp) + strlen(line) + 2);
        if (!input)
            return NULL;
        sprintf(input, "%s\n%s", temp, line);
        free(temp);
        free(line);

        // Recheck for closing quote
        quote = 0;
        for (int i = 0; input[i]; i++)
        {
            if (!quote && (input[i] == '\'' || input[i] == '"'))
                quote = input[i];
            else if (quote && input[i] == quote)
                quote = 0;
        }
    }

    return input;
}    **/
void ft_cd(char **args)
{
    char *path;

    if (!args[1]) // No argument, go to HOME
    {
        path = getenv("HOME");
        if (!path)
        {
            printf("cd: HOME not set\n");
            return;
        }
    }
    else
        path = args[1];

    if (chdir(path) != 0)
        perror("cd");
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <readline/readline.h>
#include <readline/history.h>

char *find_executable(char *cmd)
{
    char *path = getenv("PATH");
    char *full_path, *dir, **paths;
    int i = 0;

    if (!cmd || !*cmd)
        return NULL;
    if (strchr(cmd, '/'))
        return access(cmd, X_OK) == 0 ? strdup(cmd) : NULL;

    paths = malloc(1024 * sizeof(char *));
    if (!paths) return NULL;
    dir = strtok(path, ":");
    while (dir)
    {
        paths[i++] = dir;
        dir = strtok(NULL, ":");
    }
    paths[i] = NULL;

    for (i = 0; paths[i]; i++)
    {
        full_path = malloc(strlen(paths[i]) + strlen(cmd) + 2);
        if (!full_path) continue;
        sprintf(full_path, "%s/%s", paths[i], cmd);
        if (access(full_path, X_OK) == 0)
            return full_path;
        free(full_path);
    }
    return NULL;
}

void execute_command(char **args)
{
    char *exec_path = find_executable(args[0]);
    if (!exec_path)
    {
        printf("Command not found: %s\n", args[0]);
        exit(127);
    }
    execve(exec_path, args, NULL);
    perror("execve");
    exit(1);
}

void shell_loop()
{
    char *input;
    char *args[64];
    int i;
    while (1)
    {
        input = readline("minishell$ "); // Display prompt
        if (!input) // Handle EOF (Ctrl+D)
        {
            printf("exit\n");
            break;
        }
        if (*input)
            add_history(input);

        // Tokenize input into arguments
        i = 0;
        args[i] = strtok(input, " ");
        while (args[i] != NULL)
            args[++i] = strtok(NULL, " ");

        if (!args[0])
        {
            free(input);
            continue;
        }

        if (strcmp(args[0], "exit") == 0) // Handle exit command
        {
            free(input);
            break;
        }

        pid_t pid = fork();
        if (pid == 0)
            execute_command(args);
        else if (pid > 0)
            wait(NULL);
        else
            perror("fork");

        free(input);
    }
}

int main()
{
    shell_loop();
    return 0;
}



// dir = ft_strtok(path, ":");
//     i = 0;
//     while (dir)
//     {
//         paths[i++] = dir;
//         dir = ft_strtok(NULL, ":");
//     }
//     paths[i] = NULL;
//     i = 0;
//     while(paths[i])
//     {
//         full_path = malloc(strlen(paths[i]) + strlen(str) + 2);
//         if (!full_path)
//         {
//             i++;
//             continue;
//         }
//         strcpy(full_path, paths[i]);
//         strcat(full_path, "/");
//         strcat(full_path, str);
//         if (access(full_path, X_OK) == 0)
//             return (ft_strdup(full_path));
//         else
//             perror(full_path);
//         free(full_path);
//         i++;
//     }